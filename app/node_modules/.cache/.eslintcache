[{"/Users/zoe/Desktop/Independent/currency/app/src/index.js":"1","/Users/zoe/Desktop/Independent/currency/app/src/App.js":"2","/Users/zoe/Desktop/Independent/currency/app/src/components/Average.js":"3","/Users/zoe/Desktop/Independent/currency/app/src/components/Converter.js":"4","/Users/zoe/Desktop/Independent/currency/app/src/components/CustomSelect.js":"5"},{"size":339,"mtime":1682105444518,"results":"6","hashOfConfig":"7"},{"size":685,"mtime":1682111587536,"results":"8","hashOfConfig":"7"},{"size":3698,"mtime":1682022167693,"results":"9","hashOfConfig":"7"},{"size":5196,"mtime":1681357013255,"results":"10","hashOfConfig":"7"},{"size":2955,"mtime":1682106112363,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1ezwwlj",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"15"},"/Users/zoe/Desktop/Independent/currency/app/src/index.js",[],[],[],"/Users/zoe/Desktop/Independent/currency/app/src/App.js",[],[],"/Users/zoe/Desktop/Independent/currency/app/src/components/Average.js",[],[],"/Users/zoe/Desktop/Independent/currency/app/src/components/Converter.js",["30","31"],[],"import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRotate, faCoins } from \"@fortawesome/free-solid-svg-icons\";\nimport CustomSelect from './CustomSelect';\nimport \"./converter.css\";\n\nconst Converter = () => {\n    const [currencies, setCurrencies] = useState([]);\n    const [rates, setRates] = useState([]);\n    const [enteredNumber, setEnteredNumber] = useState(null);\n    const [customSelects, setCustomSelects] = useState([\n        { currency: null, value: null },\n        { currency: null, value: null },\n        { currency: null, value: null },\n        { currency: null, value: null },\n        { currency: null, value: null },\n        { currency: null, value: null },\n    ]);\n    const [convertedValues, setConvertedValues] = useState(Array(6).fill(null));\n\n    useEffect(() => {\n        const fetchCurrencies = async () => {\n            const response = await fetch(\n                \"https://zoelindev.com/Real-time-Currency/api/currency_code.php\"\n            );\n            const data = await response.json();\n            setCurrencies(data.currency_codes);\n            setRates(data.rate);\n            //console.log(rates);\n        };\n\n        fetchCurrencies();\n    }, []);\n\n    const handleEnteredNumberChange = (number, index) => {\n        const newCustomSelects = [...customSelects];\n        newCustomSelects[index].value = number;\n        setCustomSelects(newCustomSelects);\n        console.log(newCustomSelects);\n        \n        // 如果沒有選擇幣值，則跳過更新轉換值的操作\n        if (!newCustomSelects[index].currency) {\n            return;\n        }\n    \n        // Calculate the converted values and update the state\n        const newConvertedValues = calculateConvertedValue(index);\n        setConvertedValues(newConvertedValues);\n    \n        // Update enteredValue for other CustomSelect components\n        newCustomSelects.forEach((select, i) => {\n            if (i !== index) {\n                select.value = newConvertedValues[i];\n            }\n        });\n    \n        setCustomSelects(newCustomSelects);\n    };\n    \n      \n\n    const calculateConvertedValue = (index) => {\n        // if (!customSelects[index].currency || !customSelects[index].value) {\n        //   return null;\n        // }\n\n        if (!customSelects[index].currency) {\n            return null;\n        }\n\n        const fromCurrency = customSelects[index].currency;\n        const fromValue = customSelects[index].value;\n        const fromRate = rates[`USD${fromCurrency}`]?.Exrate;\n        \n        console.log(fromCurrency, fromValue, fromRate);\n      \n        const usdValue = fromValue / fromRate;\n        console.log(\"usdValue: \"+ usdValue);\n\n        return customSelects.map((select, i) => {\n            if (i === index || !select.currency) {\n                return null;\n            }\n            const toRate = rates[`USD${select.currency}`]?.Exrate;\n            console.log(\"toRate: \"+toRate);\n\n            const answer = (usdValue * toRate).toFixed(2);\n            console.log(\"answer: \"+ answer);\n            return answer;\n        });\n      \n      };\n      \n\n      const handleCurrencyChange = (currency, index) => {\n        const newCustomSelects = [...customSelects];\n        newCustomSelects[index].currency = currency;\n        setCustomSelects(newCustomSelects);\n    \n        // 如果輸入值為 null，則跳過更新轉換值的操作\n        if (newCustomSelects[index].value === null) {\n            return;\n        }\n    \n        // Calculate the converted values and update the state\n        const newConvertedValues = calculateConvertedValue(index);\n        setConvertedValues(newConvertedValues);\n    \n        // Update enteredValue for other CustomSelect components\n        newCustomSelects.forEach((select, i) => {\n            if (i !== index) {\n                select.value = newConvertedValues[i];\n            }\n        });\n    \n        setCustomSelects(newCustomSelects);\n    };\n\n    return (\n        <div className=\"ConverterBox\">\n            <div className=\"titleBox\">\n                <h2>\n                    <FontAwesomeIcon icon={faRotate} /> Converter\n                </h2>\n                <h2>\n                    <Link to=\"/average\">\n                        <FontAwesomeIcon icon={faCoins} /> Average\n                    </Link>\n                </h2>\n                \n            </div>\n\n            <div className=\"changeBox\">\n                {customSelects.map((select, index) => (\n                    <CustomSelect\n                        key={index}\n                        options={currencies}\n                        selectedCurrency={select.currency}\n                        enteredValue={select.value}\n                        convertedValues={convertedValues} \n                        onNumberChange={(number) => handleEnteredNumberChange(number, index)}\n                        onCurrencyChange={(currency) => handleCurrencyChange(currency, index)}\n                        index={index}\n                        \n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Converter;\n","/Users/zoe/Desktop/Independent/currency/app/src/components/CustomSelect.js",["32"],[],"import { useState, useRef, useEffect } from \"react\";\n\nconst CustomSelect = ({\n    options,\n    selectedCurrency,\n    enteredValue,\n    convertedValues,\n    onNumberChange,\n    onCurrencyChange,\n    index,\n    currentIndex,\n}) => {\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [enteredNumber, setEnteredNumber] = useState(null);\n    const ref = useRef(null);\n\n    const handleOptionClick = (option) => {\n        setSelectedOption(option);\n        setIsOpen(false);\n        onCurrencyChange(option, index);\n    };\n\n    const handleNumberChange = (event) => {\n        const number = event.target.value;\n        setEnteredNumber(number);\n        onNumberChange(number, index);\n    };\n\n    const handleClickOutside = (event) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n            setIsOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, []);\n\n    return (\n        <div className=\"selectGroup\" ref={ref}>\n            <div className=\"custom-select\" onClick={() => setIsOpen(!isOpen)}>\n                {selectedOption ? (\n                    <div className=\"selected-option\">\n                        <img\n                            src={`./flags/${selectedOption}.png`}\n                            alt={selectedOption}\n                            className={selectedOption}\n                        />\n                        {selectedOption}\n                    </div>\n                ) : (\n                    <div className=\"selected-option\">Select</div>\n                )}\n                {isOpen && (\n                    <div className=\"listBox\">\n                        <ul className=\"options-list\">\n                            {options.map((option, index) => (\n                                <li\n                                    key={index}\n                                    onClick={() => handleOptionClick(option)}\n                                    className=\"option\"\n                                >\n                                    <img src={`./flags/${option}.png`} alt={option} />\n                                    {option}\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n\n            <input\n                type=\"text\"\n                value={\n                    enteredValue !== null && convertedValues\n                        ? index !== currentIndex ? convertedValues[index] : enteredValue\n                        : \"\"\n                }\n                onChange={handleNumberChange}\n                placeholder=\"00.00\"\n                className=\"money\"\n            />\n        </div>\n    );\n};\n\nexport default CustomSelect;\n",{"ruleId":"33","severity":1,"message":"34","line":11,"column":12,"nodeType":"35","messageId":"36","endLine":11,"endColumn":25},{"ruleId":"33","severity":1,"message":"37","line":11,"column":27,"nodeType":"35","messageId":"36","endLine":11,"endColumn":43},{"ruleId":"33","severity":1,"message":"34","line":16,"column":12,"nodeType":"35","messageId":"36","endLine":16,"endColumn":25},"no-unused-vars","'enteredNumber' is assigned a value but never used.","Identifier","unusedVar","'setEnteredNumber' is assigned a value but never used."]